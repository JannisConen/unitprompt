name: Publishing CI

on:
  create:
    tags:
      - 'v*.*.*'

jobs:
  build:
    uses: ./.github/workflows/build.yml
    secrets: inherit

  publish_jest:
    needs: build
    runs-on: ubuntu-latest
    environment: test
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.15.0'
      - name: Copy shared prompts for Jest
        run: cp -r ../shared/prompts ./prompts
        working-directory: ./jest
      - name: Install dependencies
        run: npm ci
        working-directory: ./jest
      - name: Extract version from tag
        id: extract_version
        run: echo "::set-output name=VERSION::${GITHUB_REF/refs/tags/v/}"
      - name: Update version
        run: npm version ${{ steps.extract_version.outputs.VERSION }}
        working-directory: ./jest
      - name: Build the project
        run: npm run build
        working-directory: ./jest
      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "//registry.npmjs.org/:_authToken=\${NODE_AUTH_TOKEN}" > ~/.npmrc
          npm publish --access public
        working-directory: ./jest

  publish_pytest:
    needs: build
    runs-on: ubuntu-latest
    environment: test
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10.14'
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo 'export PATH="$HOME/.local/bin:$PATH"' >> $GITHUB_ENV
      - name: Copy shared prompts for Pytest
        run: cp -r ../shared/prompts ./unitprompt/prompts
        working-directory: ./pytest
      - name: Install dependencies
        run: poetry install
        working-directory: ./pytest
      - name: Extract version from tag
        id: extract_version
        run: echo "::set-output name=VERSION::${GITHUB_REF/refs/tags/v/}"
      - name: Update version
        run: poetry version ${{ steps.extract_version.outputs.VERSION }}
        working-directory: ./pytest
      - name: Build and publish Python package
        env:
          POETRY_PYPI_TOKEN_PYPI: ${{ secrets.PYPI_TOKEN }}
        run: |
          poetry build
          poetry publish --username __token__ --password ${{ secrets.PYPI_TOKEN }}
        working-directory: ./pytest
